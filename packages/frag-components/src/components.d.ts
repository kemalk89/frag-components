/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ActionButton } from "./components/fc-modal/fc-modal";
import { CardItem, RenderCardContent, UpdateCardStatus } from "./components/fc-swim-lanes/fc-swim-lane";
import { CardItem as CardItem1, RenderCardContent as RenderCardContent1, SwimLaneItem, UpdateCardStatus as UpdateCardStatus1 } from "./components/fc-swim-lanes/fc-swim-lane";
import { Tab } from "./components/fc-tabs/fc-tabs";
import { MenuItems } from "./components/fc-top-menu/fc-top-menu";
export namespace Components {
    interface AppContainer {
    }
    interface FcButton {
        "color": string;
    }
    interface FcIconButton {
        "color": string;
    }
    interface FcInput {
        "label": any;
    }
    interface FcModal {
        "actionButtons": ActionButton[];
        "isOpen": boolean;
        "modalTitle": string;
    }
    interface FcSelect {
    }
    interface FcSwimLane {
        "cards": CardItem[];
        "columnId": string;
        "laneTitle": string;
        "renderCardContent": RenderCardContent;
        "updateCardStatus": UpdateCardStatus;
    }
    interface FcSwimLanes {
        "cards": CardItem[];
        "lanes": SwimLaneItem[];
        "renderCardContent": RenderCardContent;
        "updateCardStatus": UpdateCardStatus;
    }
    interface FcTab {
        "tab": string;
    }
    interface FcTabs {
        "selectedTab": string;
        "tabs": Tab[];
    }
    interface FcToast {
    }
    interface FcTooltip {
    }
    interface FcTopMenu {
        "items": MenuItems[];
    }
}
declare global {
    interface HTMLAppContainerElement extends Components.AppContainer, HTMLStencilElement {
    }
    var HTMLAppContainerElement: {
        prototype: HTMLAppContainerElement;
        new (): HTMLAppContainerElement;
    };
    interface HTMLFcButtonElement extends Components.FcButton, HTMLStencilElement {
    }
    var HTMLFcButtonElement: {
        prototype: HTMLFcButtonElement;
        new (): HTMLFcButtonElement;
    };
    interface HTMLFcIconButtonElement extends Components.FcIconButton, HTMLStencilElement {
    }
    var HTMLFcIconButtonElement: {
        prototype: HTMLFcIconButtonElement;
        new (): HTMLFcIconButtonElement;
    };
    interface HTMLFcInputElement extends Components.FcInput, HTMLStencilElement {
    }
    var HTMLFcInputElement: {
        prototype: HTMLFcInputElement;
        new (): HTMLFcInputElement;
    };
    interface HTMLFcModalElement extends Components.FcModal, HTMLStencilElement {
    }
    var HTMLFcModalElement: {
        prototype: HTMLFcModalElement;
        new (): HTMLFcModalElement;
    };
    interface HTMLFcSelectElement extends Components.FcSelect, HTMLStencilElement {
    }
    var HTMLFcSelectElement: {
        prototype: HTMLFcSelectElement;
        new (): HTMLFcSelectElement;
    };
    interface HTMLFcSwimLaneElement extends Components.FcSwimLane, HTMLStencilElement {
    }
    var HTMLFcSwimLaneElement: {
        prototype: HTMLFcSwimLaneElement;
        new (): HTMLFcSwimLaneElement;
    };
    interface HTMLFcSwimLanesElement extends Components.FcSwimLanes, HTMLStencilElement {
    }
    var HTMLFcSwimLanesElement: {
        prototype: HTMLFcSwimLanesElement;
        new (): HTMLFcSwimLanesElement;
    };
    interface HTMLFcTabElement extends Components.FcTab, HTMLStencilElement {
    }
    var HTMLFcTabElement: {
        prototype: HTMLFcTabElement;
        new (): HTMLFcTabElement;
    };
    interface HTMLFcTabsElement extends Components.FcTabs, HTMLStencilElement {
    }
    var HTMLFcTabsElement: {
        prototype: HTMLFcTabsElement;
        new (): HTMLFcTabsElement;
    };
    interface HTMLFcToastElement extends Components.FcToast, HTMLStencilElement {
    }
    var HTMLFcToastElement: {
        prototype: HTMLFcToastElement;
        new (): HTMLFcToastElement;
    };
    interface HTMLFcTooltipElement extends Components.FcTooltip, HTMLStencilElement {
    }
    var HTMLFcTooltipElement: {
        prototype: HTMLFcTooltipElement;
        new (): HTMLFcTooltipElement;
    };
    interface HTMLFcTopMenuElement extends Components.FcTopMenu, HTMLStencilElement {
    }
    var HTMLFcTopMenuElement: {
        prototype: HTMLFcTopMenuElement;
        new (): HTMLFcTopMenuElement;
    };
    interface HTMLElementTagNameMap {
        "app-container": HTMLAppContainerElement;
        "fc-button": HTMLFcButtonElement;
        "fc-icon-button": HTMLFcIconButtonElement;
        "fc-input": HTMLFcInputElement;
        "fc-modal": HTMLFcModalElement;
        "fc-select": HTMLFcSelectElement;
        "fc-swim-lane": HTMLFcSwimLaneElement;
        "fc-swim-lanes": HTMLFcSwimLanesElement;
        "fc-tab": HTMLFcTabElement;
        "fc-tabs": HTMLFcTabsElement;
        "fc-toast": HTMLFcToastElement;
        "fc-tooltip": HTMLFcTooltipElement;
        "fc-top-menu": HTMLFcTopMenuElement;
    }
}
declare namespace LocalJSX {
    interface AppContainer {
    }
    interface FcButton {
        "color"?: string;
    }
    interface FcIconButton {
        "color"?: string;
    }
    interface FcInput {
        "label"?: any;
    }
    interface FcModal {
        "actionButtons"?: ActionButton[];
        "isOpen"?: boolean;
        "modalTitle"?: string;
        "onCloseModal"?: (event: CustomEvent<void>) => void;
    }
    interface FcSelect {
    }
    interface FcSwimLane {
        "cards"?: CardItem[];
        "columnId"?: string;
        "laneTitle"?: string;
        "renderCardContent"?: RenderCardContent;
        "updateCardStatus"?: UpdateCardStatus;
    }
    interface FcSwimLanes {
        "cards"?: CardItem[];
        "lanes"?: SwimLaneItem[];
        "renderCardContent"?: RenderCardContent;
        "updateCardStatus"?: UpdateCardStatus;
    }
    interface FcTab {
        "tab"?: string;
    }
    interface FcTabs {
        "selectedTab"?: string;
        "tabs"?: Tab[];
    }
    interface FcToast {
    }
    interface FcTooltip {
    }
    interface FcTopMenu {
        "items"?: MenuItems[];
    }
    interface IntrinsicElements {
        "app-container": AppContainer;
        "fc-button": FcButton;
        "fc-icon-button": FcIconButton;
        "fc-input": FcInput;
        "fc-modal": FcModal;
        "fc-select": FcSelect;
        "fc-swim-lane": FcSwimLane;
        "fc-swim-lanes": FcSwimLanes;
        "fc-tab": FcTab;
        "fc-tabs": FcTabs;
        "fc-toast": FcToast;
        "fc-tooltip": FcTooltip;
        "fc-top-menu": FcTopMenu;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-container": LocalJSX.AppContainer & JSXBase.HTMLAttributes<HTMLAppContainerElement>;
            "fc-button": LocalJSX.FcButton & JSXBase.HTMLAttributes<HTMLFcButtonElement>;
            "fc-icon-button": LocalJSX.FcIconButton & JSXBase.HTMLAttributes<HTMLFcIconButtonElement>;
            "fc-input": LocalJSX.FcInput & JSXBase.HTMLAttributes<HTMLFcInputElement>;
            "fc-modal": LocalJSX.FcModal & JSXBase.HTMLAttributes<HTMLFcModalElement>;
            "fc-select": LocalJSX.FcSelect & JSXBase.HTMLAttributes<HTMLFcSelectElement>;
            "fc-swim-lane": LocalJSX.FcSwimLane & JSXBase.HTMLAttributes<HTMLFcSwimLaneElement>;
            "fc-swim-lanes": LocalJSX.FcSwimLanes & JSXBase.HTMLAttributes<HTMLFcSwimLanesElement>;
            "fc-tab": LocalJSX.FcTab & JSXBase.HTMLAttributes<HTMLFcTabElement>;
            "fc-tabs": LocalJSX.FcTabs & JSXBase.HTMLAttributes<HTMLFcTabsElement>;
            "fc-toast": LocalJSX.FcToast & JSXBase.HTMLAttributes<HTMLFcToastElement>;
            "fc-tooltip": LocalJSX.FcTooltip & JSXBase.HTMLAttributes<HTMLFcTooltipElement>;
            "fc-top-menu": LocalJSX.FcTopMenu & JSXBase.HTMLAttributes<HTMLFcTopMenuElement>;
        }
    }
}
